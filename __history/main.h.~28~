
#ifndef Unit1H
#define Unit1H




#include <fstream>
#include <iostream>
#include <stdio.h>
#include <vector>

typedef std::vector<double> vec1D ;
typedef std::vector<vec1D> vec2D ;


//NO - COORDENADAS E CONDICOES DE CONTORNO
class CNO
{
 public:
	int I;          ///< Indice
	int VINX;      	///< Condicao de Contorno ==0 (livre) e ==1 (engastado)
	int VINY;
	double X;	    ///< No em X

	double Y;       ///< No em Y
	double UX;      ///<  U - Deslocamento
	double UY;
	double PX;      ///<  P - Carga
	double PY;
	int grauLiberdade;

	CNO (const int& _I,const double& _X, const double& _Y,  const int& _VINX, const int& _VINY , const double& _UX, const double& _UY , const double& _PX, const double& _PY  );

	void calL () ;

	};
typedef std::vector<CNO> VCNO;
typedef std::vector<3, CNO*> V3PNO; // Vetor de 3 ponteiros da classe No
//MATERIAIS - PROPRIEDADES
class CMATERIAL
{
 public:
	int I;
	double E;         ///< Modulo de elasticidade
	double poisson;   ///< Poisson

	//double ME;        ///< Matriz de elasticidade

	CMATERIAL (const int& _I, const double& _E, const double& _poisson);
    //montar construtura e ver ex do professor todo vao ser com &
};
typedef std::vector<CMATERIAL> VCMATERIAL;

//ELEMENTOS - GEOMETRIA
class CELEMENTO
{
  public:

	//double espessura;     ///< Espessura do elemento
	//int conect [3];       ///< conectividade dos nos
	//int MAT;              ///< material
	//int EPT = 1;          ///< EPT = 1 e EPD = 0

	int I;

	V3PNO NOS ;
	//CNO* NO0;               ///< conectividade dos nos
	//CNO* NO1;               ///< conectividade dos nos
	//CNO* NO2;               ///< conectividade dos nos




	int EP;               ///< EPT = 1 e EPD = 0
	CMATERIAL* MAT;       ///< material
	vec2D KL;             /// Matriz de rigidez local
	vec1D FL;

	CELEMENTO ( const int& _I, CNO* _NO0,CNO* _NO1, CNO* _NO2, const int& _EP, CMATERIAL* _MAT );


	void calK ();         /// retorna a matriz
	void calF ();
	void calA ();

};
typedef std::vector<CELEMENTO> VCELEMENTO;

#endif
